/*
1 Week(기초 이론)

- 제임스 고슬링 1991년 가정용 제품에 사용 하는 언어
- 자바 가상 기계(버추얼머신)
	- JAVA로 개발한 프로그램을 컴파일하여 만들어지는 바이트코드를 실행시키기 위한 가상머신
- 자바 바이트 코드(*.class) 가 있기때문에 어디서나 실행이 가능(운영체제의 제약 X)
- SE : 데스크탑과 서버에서 개발하고 실행
- EE : 기업용 개발을 하는데 필요한 도구 및 라이브러리
	- api, 웹 서버. 서블릿 jsp등
- ME : 모바일이나 임베디드 장치를 위해 개발
- FX : 그래픽 엔진 제공
- 자바 애플리케이션 : 독립적으로 실행 될 수 있는 응용프로그램
- 애플릿 : 웹 브라우저 안에서 실행되는 프로그램
- 서블릿 : 서버 모듈로 클라이언트의 요구를 받아 그에 대한 처리를 한 후 HTML 문서 형태로 클라이언트 전송
- 개발 단계
	- 소스파일(.java) -> 컴파일러 -> 바이트코드(.class) -> jvm->운영체제 -> 하드웨어
- javac Test.java -> class파일 생성 -> java Test

2 Week(기본 구성요소)

- 클래스 : 객체지향 언어의 기본적인 빌딩블록
- 문자형 : 유니코드 규격 중 UTF-16을 사용
- 초기화 하지 않고 변수를 사용하면 오류
- 자동적인 형변환
	- 피 연산자 중 하나가 double이라면 다른 연산자도 double
	- 피 연산자 중 하나가 float이라면 다른 연산자도 float
	- 피 연산자 중 하나가 long라면 다른 연산자도 long
	- 그렇지 않다면 모든 피 연산자는 int로 변환
- 강제적인 형 변환 (자료형)수식 -> (double)x, (int)y;
- 배열 : 통일한 타입의 변수의 모임 / 인덱스를 이용하여 접근 가능 s[0], s[1] .. . . . .. . .s[n]
```
int[] arr;
arr = new int[3];
int[] s = new int[4];
int[] v = {1, 2, 3};
```
- 무명 배열 : 배열의 이름을 지정하지 않고 초기값으로 배열의 생성이 가능
```
sum(new int[] {1, 2, 3, 4});
```
- for-each루프
```
for(int n: arr) {
    System.out.println(n);
}
```
- 배열을 복사하고 싶다면 Arrays.copyOf(list, listLength)사용
- 배열을 정렬하고 싶다면 Arrays.sort(list) 사용
- 이차원 배열
```
int[][] arr = new int[2][3];
int[][] a = {
        {1, 2, 3},
        {2, 3, 4}
};
```

3week(객체지향 개념)

- 실제 세계를 모델링하여 소프트웨어를 개발하는 방법 / 데이터와 절차를 하나의 덩어리로 묶어서 생각
- 객체는 상태와 동작을 가지고 있다 / 상태 = 변수, 동작 = 메소드
- 캡슐화
	- 관련된 데이터와 코드를 하나의 묶음으로 정리하는것
	- 업그레이드가 쉽다.
- 정보은닉
	- 객체를 캡슐로 싸서 객체의 내부를 보호하는 것 , 실제 구현 내용을 외부에 감춤
- 상속
	- 이미 작성된 부모클래스를 이어 받아서 새로운 클래스를 생성하는 기법
	- 기존의 코드를 재활용하기 위함
- 다형성
	- 하나의 방법(이름)으로 많은 상황에 대처하는 것
	- 개념적으로 동일한 작업을 하는 멤버 함수에 같은 이름을 부여 할 수 있음으로 코드가 간단
- 추상화
	- 자료 : 객체지향 관점에서 클래스를 정의하는 것
	- 추상클래스 : 여러 클래스간 비슷한 필드와 메소드를 공통적으로 추출해 만드는 클래스
	- 인터페이스 : 동일한 목적 하에 동일한 기능을 수행하게끔 강제하는 것
- 객체지향 프로그래밍의 특징
	- 캡슐화
	- 상속
	- 다형성
- 객체지향 프로그래밍의 장점
	- 신뢰성있는 소프트웨어 작성이 간편
	- 코드의 재사용이 쉬움
	- 업그레이드가 쉽다
	- 디버깅이 쉽다
- 클래스
	- 클래스 : 객체를 만드는 설계도
	- 인스턴스 : 클래스로부터 만들어지는 각각의 객체
- 메소드
	- 입력을 받아서 처리하고 결과를 반환하는 것 == 함수
	- 인수와 매개 변수 -> 인수 = 메소드를 호출 시 전달 하는 값 / 매개변수 = 메소드에서 값을 받을때 사용하는 변수
- 메소드 오버로딩
	- 같은 이름의 메소드가 여러 개 존재하는 것 하지만 각각의 메소드가 가지고 있는 매개변수는 달라야 한다
- UML
	- 객체지향설계 시에 사용되는 모델링언어
	- 소프트웨어를 작성하기 전 구현하고자 하는 시스템을 시각화하여 검토가능
- String Class
	- 문자열은 자바에서 기초 자료형이 아니고 String 클래스를 사용하여 처리
```
char charAt(int index) {
    return 0;
} //인덱스에 있는 문자 반환
int compareTo(String s) {
    return 1;
} //사전적 순서로 문자열 비교 앞 -1, 같 0, 뒤 1
String concat(String s) {
    return "a";
} //문자열 더학기
boolean equals(Object o) {
    return true;
} //객체와 문자열 비교
boolean equalsIgnoreCase(String s) {
    return true;
}//대소문자 무시 비교
boolean isEmpty() {
    return true;
}//length가 0이면 true
int length() {
    return 1;
}//문자열의 길이 반환
```
- wrapper 클래스
	- int -> Integer, char -> Character등
	- 문자열을 기초 자료형으로 변환하려면 Integer.parseInt등 사용

4weeks

- 접근제어
	- 다른 클래스가 특정한 필드나 메소드에 접근하는 것을 제어하는것
	- private -> default -> protected -> public순으로 많이 허용
	- private
		- 해당 클래스에서만 사용 가능
	- default
		- 별도로 설정하지 않는다면, 해당 패키지 내에서만 접근이 가능
	- protected
		- 동일 패키지의 클래스 또는 해당 클래스를 상속받은 다른 패키지의 클래스(패키지가 달라도)에서 접근 가능
	- public
		- 어디서든 접근 가능
- 정보은닉
	- 구현의 세부 사항을 클래스 안에 감추는 것 / 변수는 감추고 메소드를 사용하게 함
- 설정자 / 접근자
	- setXXX(), getXXX()
	- 클래스 업그레이드에 간편, 잘못된 값이 넘어오는 경우를 사전에 차단
	- 접근자만 제공한다면 읽기만 가능한 필드생성 가능
- 생성자
	- 객체가 생성될 때에 필드에 초기값을 제공하고 필요한 초기화 절차를 실행
	- 메소드와 마찬가지로 오버로딩이 가능
```
Box box = new Box(1, 2, 1);
```
- this
	- 메소드나 생성자 등에서 현재 객체를 나타냄
	- this() : 생성자 내에서 다른 생성자를 호출할 때 사용
	- this.name : 해당 객체의 namequstn ghcnf
- 필드 선언시 초기화
```
private boolean full = false;
```
- 인스턴스 초기화 블록
	-  인스턴스가 생성될 때마다 수행
	- 모든 생성자가 공통적인 내용을 수행할때 / new키워드로 인스턴스 셍성시 실행
```
        {
		instanceMethod();
		A++;
		System.out.println("instance block  : " + A);
	}
```
- 메소드로 객체 전달 및 반환
	- 객체를 메소드로 전달하게 된다면 객체가 복사 되는것이 아니라 참조 변수의 값이 복사되어 전달
	- 따라서 인수와 매개변수 모두 동일한 객체를 가르키고 있음
	- 배열또한 객체이기 때문에 배열을 전달하는 것은 배열 참조 변수를 복사하는것과 같다
- 정적 멤버 (Static)
	- 모든 객체를 통틀어 하나만 생성되고 모든 객체가 이것을 공유하는 것
	- 하나의 클래스에 하나만 존재
```
class Ta{
    int ch;
    char t;
    boolean on;
    static int count;
}
```
- 인스턴스 변수
	- 인스턴스 마다 별도로 생성되기 때문에 인스턴스 변수
```
class Ta{
    int ch;
    char t;
    boolean on;
}
```
- 정적 메소드
	- 변수와 마찬가지로 메소드도 가능
	- 정적메소드는 static을 메소드 앞에 붙이며 클래스 이름을 통하여 호출
```
Math.sqrt(2.3);
```
- 내장 클래스
	- 클래스 안에 클래스를 정의 할 수 있다
	- 외부 클래스(Hello)의 private멤버도 접근이 가능 하다
```
public class Hello {
    class InnerClass {}
}
```
- 상속
	- 기존 클래스의 필드와 메소드 재사용
	- 기존 클래스의 일부만 변경 가능
	- 중복제거
	- 부모 클래스(Animal)는 추상적이고 자식 클래스(Lion, Dog, Cat)는 구체적이다.
	- extends 예약어 사용
	- 상속받은 메소드와 필드는 .을 사용한다. (객체 생성은 자식 클래스로)
```
public class Hello extends Television{
```
- 메소드 오버라이딩
	- 자식 클래스가 필요에 따라 상속된 메소드를 재 정의 하는것
	- 메소드의 이름, 반환형, 매개 변수의 타입과 갯수가 일치해야 한다.
	- super 예약어를 사용하여 부모 클래스 멤버 접근
```
super.toString(); //부모 클래스의 메소드 호출
```
- 상속과 생성자
	- 자식 클래스의 객체를 생성할때 부모 클래스의 생성자도 호출된다.
	- 부모클래스 생성자 -> 자식 클래스의 생성자
	- super 예약어를 사용해서 명시적으로 부모 클래스의 생성자 호출도 가능
- 추상클래스
	- 몸체가 구현되지 않은 메소드를 가지고 있는 클래스
	- 추상적인 개념을 표현하는데 적합 (객체 생성 X) => Animal -> (Lion, goldfish, eagle)
	- abtract 예약어 사용
- 상속과 다형성
	- 객체의 타입이 다르다면 같은 메시지가 전달되어도 다른 동작을 하는 것
	- 클래스 A가 클래스 B의 객체 참조 불가
	- 만약 A 클래스가 부모 클래스라면 가능
```
A a = new B(); // X
```
- 동적 메소드 호출
	- 자식 클래스에서 부모 클래스의 메소드를 오버라이딩
- 동적 바인딩
	- 메소드 호출을 실제 메소드의 몸체와 연결하는 것을 바인딩이라 함.
	- Shape[] a으로 선언한다면 상속받은 자식 클래스들을 참조 가능
- 메소드의 매개 변수로 부모 클래스의 참조 변수를 사용 가능
- Objcet 클래스
	- java.lang에 들어있으며 클래스 구조 중 맨 위에 위치
```
Object clone()  {
    return super.clone();
}//자신의 복사본을 생성
equals(Object obj) {
    return super.equals(obj);
}//obj가 현재와 같은 객체인지 확인
 void finalize() {
    super.finalize();
}//사용 않는 객체가 제거되기 직전 호출
class getClass();//객체의 클래스 정보
int hashCode(); //객체에 대한 해쉬코드
String toString(); //객체를 기술하는 문자열 반환
```
- instranceof 메소드를 사용해서 객체가 어떤 타입인지 찾을 수 있다
- IS-A
	- ~은 ~이다 / 상속은 여기에 포함
	- 자동차는 탈것이다 / 강아지는 동물이다
- HAS-A
	- ~은~을 갖고 있다
	- 도서관은 책을 가지고 있다 / 거실은 소파를 가지고 있다
	- 객체지향에서 has-a는 구성관계 또는 집합관계를 나타낸다
- final class(종단 클래스)
	- 상속이 불가능한 클래스 / 주로 보안상의 이유로 사용
- final method(종단 메소드)
	- 특정한 메소드가 오버라이딩 되지 않게  하기 위함
- 정적 메소드 오버라이딩
	- 부모 클래스에서 호출하냐, 아니냐에 따라 다름
```
Cat myCat = new Cat();
Animal myAnimal = myCat;
Animal.eat(); // 부모 클래스의 정적 메소드
myAnimal.eat();//cat의 정적메소드
```
- interface
	- 서로 다른 장치들이 연결되어 상호 데이터를 주고받는 규격
	- 클래스와 클래스 사이의 규격을 나타낸것
	- 몸체가 없는 추상 메소드만 정의 가능
	- implements 예약어를 사용하여 상속하듯이 사용 . implements 된 클래스에서 메소드 구현
	- 하나의 타입으로 간주 하기에 참조변수 생성 가능
	- 인터페이스가 인터페이스를 상속 받는 것도 가능 / 다중상속
	- 상수의 정의 가능 / 상수를 공유하려면 인터페이스를 구현
```
interface testInterface extend superInterface{
    int NORTH = 1;

    public void a();
    public void s();
}
```
- 다중상속
	- 하나의 클래스가 여러 부모 클래스를 가지는 것 / 하늘을 나는 자동차는 자동차와 비행기의 특성을 가짐
	- 자바에서는 다중상속을 지원 X / 인터페이스를 사용하여 비슷하게 구현
```
class Test extend superClass implements TestInterface{
    public void a();
    public void s();
}
```
- 디폴트 메소드
	- 인터페이스 개발자가 메소드의 디폴트를 구현해두는 것
- 인터페이스의 정적메소드
	- 정적메소드가 인터페이스에 있는것도 좋다.
- 무명 클래스
	- 클래스의 몸체는 정의되지만 이름이 없는것, / 클래스 정의와 동시에 객체가 생성
	- 이름이 없기에 한번만 사용가능
- 람다식
	- 인터페이스에 대입 가능
```
new Thread(()->{
      System.out.println("Welcome Heejin blog");
}).start();
```
- 패키지
	- 서로 관련 있는 클래스나 인터페이스 들을 하나로 묶은것
	- 서로 관련된 클래스를 모을 수 있다.
	- 세밀한 접근제어 설정 가능
- JVM이 클래스 파일 찾는법
	- 클래스 경로 : 가상 머신이 클래스 파일을 찾는 디렉토리
	- PATH 환경변수 설정, jvm실행시 -classpath 사용,
 */